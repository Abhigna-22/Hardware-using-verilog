//2:1 1bit wide mux 
module top_module( 
    input a, b, sel,
    output out ); 
    assign out=sel?(b):(a);
endmodule

//2:1 mux using 100bit wide mux
module top_module( 
    input [99:0] a, b,
    input sel,
    output [99:0] out );
    assign out=sel?(b):(a);
endmodule

//Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. 
//For the unused cases (sel=9 to 15), set all output bits to '1'.

module top_module( 
    input [15:0] a, b, c, d, e, f, g, h, i,
    input [3:0] sel,
    output [15:0] out );
always_comb
    begin
        case(sel)
            4'b0000: out=a;
            4'b0001: out=b;
            4'b0010: out=c;
            4'b0011: out=d;
            4'b0100: out=e;
            4'b0101: out=f;
            4'b0110: out=g;
            4'b0111: out=h;
            4'b1000: out=i;
            default: out=-1;
                endcase
     end      
endmodule

//Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector.
//sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.

module top_module( 
    input [255:0] in,
    input [7:0] sel,
    output out );
    assign out=in[sel];
            
endmodule

