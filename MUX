//2:1 1bit wide mux 
module top_module( 
    input a, b, sel,
    output out ); 
    assign out=sel?(b):(a);
endmodule

//2:1 mux using 100bit wide mux
module top_module( 
    input [99:0] a, b,
    input sel,
    output [99:0] out );
    assign out=sel?(b):(a);
endmodule

//Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. 
//For the unused cases (sel=9 to 15), set all output bits to '1'.

module top_module( 
    input [15:0] a, b, c, d, e, f, g, h, i,
    input [3:0] sel,
    output [15:0] out );
always_comb
    begin
        case(sel)
            4'b0000: out=a;
            4'b0001: out=b;
            4'b0010: out=c;
            4'b0011: out=d;
            4'b0100: out=e;
            4'b0101: out=f;
            4'b0110: out=g;
            4'b0111: out=h;
            4'b1000: out=i;
            default: out=-1;
                endcase
     end      
endmodule

//Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector.
//sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.

module top_module( 
    input [255:0] in,
    input [7:0] sel,
    output out );
    assign out=in[sel];
            
endmodule

//Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. 
//Do the same twice, once using assign statements and once using a procedural if statement.
// synthesis verilog_input_version verilog_2001
module top_module(
    input a,
    input b,
    input sel_b1,
    input sel_b2,
    output wire out_assign,
    output reg out_always   ); 
    assign out_assign=(sel_b1==1&sel_b2==1)?b:a;
    always@(*)begin
        if (sel_b1==1&sel_b2==1) begin
            out_always=b;
        end
        else  begin
            out_always=a;
        end
    end
endmodule


//Case statements are more convenient than if statements if there are a large number of cases. 
//So, in this exercise, create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. 
//Otherwise, output 0. The data inputs and outputs are all 4 bits wide.
// synthesis verilog_input_version verilog_2001
module top_module ( 
    input [2:0] sel, 
    input [3:0] data0,
    input [3:0] data1,
    input [3:0] data2,
    input [3:0] data3,
    input [3:0] data4,
    input [3:0] data5,
    output reg [3:0] out   );//

    always@(*) begin  // This is a combinational circuit
        case(sel)
            3'b000:out=data0;
            3'b001:out=data1;
            3'b010:out=data2;
            3'b011:out=data3;
            3'b100:out=data4;
            3'b101:out=data5;
            default:out=0; //necessary bcos it creates a latch
            
            endcase
    end

endmodule
