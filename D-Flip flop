//Create 8 D flip-flops with active high synchronous reset. All DFFs should be triggered by the positive edge of clk.
module top_module (
    input clk,
    input reset,            // Synchronous reset
    input [7:0] d,
    output [7:0] q
);
    always@(posedge clk)begin
        if(reset!=1)
            q<=d;
        else 
           	q<=0;
    end
endmodule

//Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.

module top_module (
    input clk,
    input reset,
    input [7:0] d,
    output [7:0] q
);
    always@(negedge clk) begin
        if(reset!=1)
            q<=d;
        else
            q<=8'b00110100;
    end
endmodule

//Create 8 D flip-flops with active high asynchronous reset. All DFFs should be triggered by the positive edge of clk.
module top_module (
    input clk,
    input areset,   // active high asynchronous reset
    input [7:0] d,
    output reg [7:0] q
);
    always@(posedge clk or posedge areset)  // Sensitive to clock and reset
  begin
    if (areset == 1)
      q<= 0;
    else

//Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. 
//The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. 
//byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0].
//resetn is a synchronous, active-low reset.
//All DFFs should be triggered by the positive edge of clk.


module top_module (
    input clk,
    input resetn,
    input [1:0] byteena,
    input [15:0] d,
    output [15:0] q
);
    always@(posedge clk)begin
        if(resetn!=1)
            q<=0;
        else begin
            q[15:8]<=byteena[1]?d[15:8]:q[15:8];
            q[7:0]<=byteena[0]?d[7:0]:q[7:0]; end
    end
endmodule

      q <= d;
  end
endmodule

