//Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. 
//The reset input is synchronous, and should reset the counter to 0.

module top_module (
    input clk,
    input reset,      // Synchronous active-high reset
    output [3:0] q);
    always@(posedge clk)begin
        if(reset==1)
            q<=0;
        else
            q<=q+1;
    end
endmodule

//Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0.
module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    always@(posedge clk)begin
        if(reset==1)
            q<=0;
        else if(q==9)
            q<=0;
        else
            q<=q+1;
            
    end
endmodule

//Make a decade counter that counts 1 through 10, inclusive. The reset input is synchronous, and should reset the counter to 1.
module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    always@(posedge clk)begin
        if(reset==1)
            q<=1;
        else if(q==10)
            q<=1;
        else
            q<=q+1;
            
    end
endmodule

//Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0. 
//We want to be able to pause the counter rather than always incrementing every clock cycle, so the slowena input indicates when the counter should increment.

module top_module (
    input clk,
    input slowena,
    input reset,
    output [3:0] q);
    always@(posedge clk)begin
        if(reset==1)
            q<=0;
        else if(slowena==1& q==9)
            q<=0;
        else if(slowena==1)
            q<=q+1;
        else if(slowena==0 )
            q<=q;
    end
endmodule

